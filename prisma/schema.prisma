generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  password      String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  classes       Class[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Class {
  id          String    @id @default(uuid())
  name        String
  description String?
  subject     String?
  semester    String?
  year        Int?
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lectures    Lecture[]
}

model Lecture {
  id             String   @id @default(uuid())
  title          String?
  transcriptJson Json?
  summaryMd      String?
  status         String   @default("uploaded")
  classId        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  class          Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  quiz           Quiz?
}

model Quiz {
  id           String       @id @default(uuid())
  lectureId    String       @unique
  difficulty   String
  numQuestions Int
  isPublished  Boolean      @default(false)
  publicSlug   String?      @unique
  title        String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  questions    Question[]
  lecture      Lecture      @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  submissions  Submission[]
}

model Question {
  id           String   @id @default(uuid())
  quizId       String
  prompt       String
  options      Json
  correctIndex Int
  rationale    String?
  sources      Json?
  answers      Answer[]
  quiz         Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model Submission {
  id           String    @id @default(uuid())
  quizId       String
  studentLabel String?
  startedAt    DateTime  @default(now())
  submittedAt  DateTime?
  answers      Answer[]
  quiz         Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model Answer {
  submissionId String
  questionId   String
  chosenIndex  Int?
  isCorrect    Boolean
  question     Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@id([submissionId, questionId])
}
